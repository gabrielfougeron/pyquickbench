
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_build/auto_examples/tutorial/05-Plotting_scalars.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__build_auto_examples_tutorial_05-Plotting_scalars.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__build_auto_examples_tutorial_05-Plotting_scalars.py:


Convergence analysis of scipy's Runge-Kutta methods for ODE IVP
===============================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Evaluation of relative quadrature error with the following parameters:

.. GENERATED FROM PYTHON SOURCE LINES 8-83

.. code-block:: Python



    def scipy_ODE_cpte_error_on_test(
        method      ,
        nint        ,
    ):

        # Solutions: Airy functions
        # Nonautonomous linear test case

        test_ndim = 2

        def ex_sol(t):

            ai, aip, bi, bip = scipy.special.airy(t)

            return np.array([ai,bi,aip,bip])

        def fgun(t, xy):
        
            fxy = np.empty(2*test_ndim)
            fxy[0] =  xy[2]
            fxy[1] =  xy[3]
            fxy[2] = t*xy[0]
            fxy[3] = t*xy[1]
        
            return fxy
        
        t_span = (0.,np.pi)
    
        max_step = (t_span[1] - t_span[0]) / nint

        ex_init  = ex_sol(t_span[0])
        ex_final = ex_sol(t_span[1])

        bunch = scipy.integrate.solve_ivp(
            fun = fgun                      ,
            t_span = t_span                 ,
            y0 = ex_init                    ,
            method = method                 ,
            t_eval = np.array([t_span[1]])  ,
            first_step = max_step           ,
            max_step = max_step             ,
            atol = 1.                       ,
            rtol = 1.                       ,
        )

        error = np.linalg.norm(bunch.y[:,0]-ex_final)/np.linalg.norm(ex_final)

        return error

    method_names = [
        "RK45"  ,  
        "RK23"  ,  
        "DOP853",  
        "Radau" ,  
        "BDF"   ,  
        "LSODA" ,  
    ]

    all_nint = np.array([2**i for i in range(12)])


    bench = {}
    for method in method_names:
    
        bench[f'{method}'] = functools.partial(
            scipy_ODE_cpte_error_on_test ,
            method  ,     
        )


    def setup(nint):
        return {'nint': nint}








.. GENERATED FROM PYTHON SOURCE LINES 125-126

The following plots give the measured relative error as a function of the number of quadrature subintervals

.. GENERATED FROM PYTHON SOURCE LINES 126-144

.. code-block:: Python


    plot_ylim = [1e-17,1e1]

    bench_filename = os.path.join(bench_folder,basename_bench_filename+'_error.npz')

    all_errors = pyquickbench.run_benchmark(
        all_nint                        ,
        bench                           ,
        setup = setup                   ,
        mode = "scalar_output"          ,
        filename = bench_filename       ,
        plot_ylim = plot_ylim                       ,
        title = f'Relative error on integrand'      ,
        ylabel = "Relative error"   ,
        show = True                                 ,
    )





.. image-sg:: /_build/auto_examples/tutorial/images/sphx_glr_05-Plotting_scalars_001.png
   :alt: Relative error on integrand
   :srcset: /_build/auto_examples/tutorial/images/sphx_glr_05-Plotting_scalars_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-146

Running time

.. GENERATED FROM PYTHON SOURCE LINES 146-161

.. code-block:: Python


    timings_filename = os.path.join(bench_folder,basename_bench_filename+'_timings.npz') 

    all_times = pyquickbench.run_benchmark(
        all_nint                        ,
        bench                           ,
        setup = setup                   ,
        mode = "timings"                ,
        filename = timings_filename     ,
        logx_plot = True                ,
        title = f'Computational cost'   ,
        show = True                     ,
    )





.. image-sg:: /_build/auto_examples/tutorial/images/sphx_glr_05-Plotting_scalars_002.png
   :alt: Computational cost
   :srcset: /_build/auto_examples/tutorial/images/sphx_glr_05-Plotting_scalars_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 162-163

Error as a function of running time

.. GENERATED FROM PYTHON SOURCE LINES 163-200

.. code-block:: Python


    bench_filename = os.path.join(bench_folder,basename_bench_filename+'_error.npz') 

    all_errors = pyquickbench.run_benchmark(
        all_nint                        ,
        bench                           ,
        setup = setup                   ,
        mode = "scalar_output"          ,
        filename = bench_filename       ,
    )

    timings_filename = os.path.join(bench_folder,basename_bench_filename+'_timings.npz') 

    all_times = pyquickbench.run_benchmark(
        all_nint                        ,
        bench                           ,
        setup = setup                   ,
        mode = "timings"                ,
        filename = timings_filename     ,
    )

    pyquickbench.plot_benchmark(
        all_errors                  ,
        all_nint                    ,
        bench                       ,
        all_xvalues = all_times     ,
        logx_plot = True            ,
        plot_ylim = plot_ylim       ,
        title = f'Relative error as a function of computational cost' ,
        ylabel = "Relative error"   ,
        xlabel = "Time (s)"         ,
    )

    plt.tight_layout()
    plt.show()





.. image-sg:: /_build/auto_examples/tutorial/images/sphx_glr_05-Plotting_scalars_003.png
   :alt: Relative error as a function of computational cost
   :srcset: /_build/auto_examples/tutorial/images/sphx_glr_05-Plotting_scalars_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.797 seconds)


.. _sphx_glr_download__build_auto_examples_tutorial_05-Plotting_scalars.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 05-Plotting_scalars.ipynb <05-Plotting_scalars.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 05-Plotting_scalars.py <05-Plotting_scalars.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
