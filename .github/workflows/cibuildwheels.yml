name: Build using cibuildwheel

env:
  python_version_to_cibw_build: '{"3.9" : "cp39*", "3.10" : "cp310*", "3.11" : "cp311*", "3.12" : "cp312*", "3.13" : "cp313*", "3.14" : "cp314*", }'
  main-python-version: '3.13'

on: workflow_dispatch

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build python ${{ matrix.python-version }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm, macos-13, macos-latest]

    steps:
      - uses: actions/checkout@v5

      - uses: TheMrMilchmann/setup-msvc-dev@v3
        if: ${{ (matrix.os == 'windows-latest') || (matrix.os == 'windows-11-arm') }}
        with:
          arch: x64

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.main-python-version }}

      - name: Specific Windows cibuildwheel env variables setup
        if: ${{ (matrix.os == 'windows-latest') || (matrix.os == 'windows-11-arm') }}
        run: |
          echo CIBW_TEST_COMMAND='' >> $GITHUB_ENV

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.4
        env:
          CIBW_BUILD: ${{ fromJSON(env.python_version_to_cibw_build)[matrix.python-version] }}
        with:
          package-dir: .
          output-dir: dist

      - name: Install Pyodide Build
        if: ${{ (matrix.os == 'ubuntu-latest') && (matrix.python-version == env.main-python-version) }}
        run: |
          python -m pip install pyodide-build
          echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV

      - name: Setup Emscripten
        if: ${{ (matrix.os == 'ubuntu-latest') && (matrix.python-version == env.main-python-version) }}
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}

      - name: Build for Pyodide
        if: ${{ (matrix.os == 'ubuntu-latest') && (matrix.python-version == env.main-python-version) }}
        run: |
          python -m build --sdist  
          pyodide build

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./dist/*

  gather-dists:
    runs-on: ubuntu-latest
    needs: build_wheels
    env:
      python-version-source: "ubuntu-latest-3.11"
    if: success() || failure()
    steps:

      - name: Download reports' artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts-dl

      - name: Copy artifacts
        run: |
          mkdir pyquickbench-dist
          mkdir pyquickbench-dist/dist
          find ./artifacts-dl/dist-ubuntu-latest-${{ env.main-python-version }}/ -name '*.tar.gz' -exec cp {} ./pyquickbench-dist/dist \; 
          find ./artifacts-dl -name '*.whl' -exec cp {} ./pyquickbench-dist/dist \; 

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyquickbench-dist
          path: './pyquickbench-dist/'